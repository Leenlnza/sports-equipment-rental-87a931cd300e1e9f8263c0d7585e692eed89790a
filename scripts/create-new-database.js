const { MongoClient } = require("mongodb")

const uri = process.env.MONGODB_URI || "mongodb://localhost:27017"
const dbName = "lcc_sports_new" // ‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà

async function createNewDatabase() {
  const client = new MongoClient(uri)

  try {
    await client.connect()
    console.log("üîó Connected to MongoDB")

    const db = client.db(dbName)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Collections
    console.log("üìÅ Creating collections...")

    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á users collection
    const users = db.collection("users")
    await users.createIndex({ email: 1 }, { unique: true })
    console.log("‚úÖ Created users collection with email index")

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á equipment collection
    const equipment = db.collection("equipment")
    await equipment.createIndex({ name: 1, category: 1 })
    console.log("‚úÖ Created equipment collection with name/category index")

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á borrow_records collection
    const borrowRecords = db.collection("borrow_records")
    await borrowRecords.createIndex({ userId: 1, status: 1 })
    await borrowRecords.createIndex({ equipmentId: 1 })
    console.log("‚úÖ Created borrow_records collection with indexes")

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    console.log("üèÄ Adding initial equipment data...")

    const equipmentData = [
      {
        name: "‡∏•‡∏π‡∏Å‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•",
        category: "‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•",
        description: "‡∏•‡∏π‡∏Å‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 15,
        available: 15,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏´‡πà‡∏ß‡∏á‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•",
        category: "‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•",
        description: "‡∏´‡πà‡∏ß‡∏á‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•‡πÅ‡∏ö‡∏ö‡∏û‡∏Å‡∏û‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 4,
        available: 4,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•",
        category: "‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•",
        description: "‡∏•‡∏π‡∏Å‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 12,
        available: 12,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏ï‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•",
        category: "‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•",
        description: "‡∏ï‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏≤‡∏ï‡∏±‡πâ‡∏á",
        total: 2,
        available: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
        category: "‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
        description: "‡∏•‡∏π‡∏Å‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô FIFA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 20,
        available: 20,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
        category: "‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
        description: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡πÅ‡∏ö‡∏ö‡∏û‡∏Å‡∏û‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 4,
        available: 4,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡πÄ‡∏Å‡∏•‡∏µ‡πâ‡∏¢‡∏á",
        category: "‡πÄ‡∏õ‡∏ï‡∏≠‡∏á",
        description: "‡∏•‡∏π‡∏Å‡πÄ‡∏Å‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏ï‡∏≠‡∏á ‡∏ú‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö",
        total: 20,
        available: 20,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡∏•‡∏≤‡∏¢",
        category: "‡πÄ‡∏õ‡∏ï‡∏≠‡∏á",
        description: "‡∏•‡∏π‡∏Å‡∏•‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏ï‡∏≠‡∏á ‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏ö‡∏ô‡∏ú‡∏¥‡∏ß‡∏•‡∏π‡∏Å",
        total: 15,
        available: 15,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡πÄ‡∏õ‡πâ‡∏≤",
        category: "‡πÄ‡∏õ‡∏ï‡∏≠‡∏á",
        description: "‡∏•‡∏π‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏ï‡∏≠‡∏á ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å",
        total: 10,
        available: 10,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ]

    const result = await equipment.insertMany(equipmentData)
    console.log(`‚úÖ Inserted ${result.insertedCount} equipment items`)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ admin (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
    console.log("üë§ Creating admin user...")

    const bcrypt = require("bcryptjs")
    const hashedPassword = await bcrypt.hash("admin123", 12)

    const adminUser = {
      name: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
      email: "admin@lcc.ac.th",
      password: hashedPassword,
      grade: "admin",
      branch: "admin",
      role: "admin",
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    try {
      await users.insertOne(adminUser)
      console.log("‚úÖ Created admin user (admin@lcc.ac.th / admin123)")
    } catch (error) {
      if (error.code === 11000) {
        console.log("‚ÑπÔ∏è  Admin user already exists")
      } else {
        console.error("‚ùå Error creating admin user:", error.message)
      }
    }

    console.log("\nüéâ Database created successfully!")
    console.log(`üìä Database name: ${dbName}`)
    console.log(`üîó Connection string: ${uri}/${dbName}`)
    console.log("\nüìã Collections created:")
    console.log("   - users (with email index)")
    console.log("   - equipment (with name/category index)")
    console.log("   - borrow_records (with userId/status indexes)")
    console.log(`\nüèÄ Equipment added: ${equipmentData.length} items`)
    console.log("üë§ Admin user: admin@lcc.ac.th / admin123")
  } catch (error) {
    console.error("‚ùå Error creating database:", error)
  } finally {
    await client.close()
    console.log("üîå Disconnected from MongoDB")
  }
}

createNewDatabase()

const { MongoClient } = require("mongodb")

// ‡πÉ‡∏™‡πà MongoDB URI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
const uri = "mongodb+srv://username:password@cluster0.xxxxx.mongodb.net/lcc_sports_new"
const dbName = "lcc_sports_new"

async function forceCreateDatabase() {
  if (!uri || uri.includes("username:password")) {
    console.error("‚ùå Please update the MongoDB URI in this script")
    console.log("üîß Replace 'username:password@cluster0.xxxxx.mongodb.net' with your actual MongoDB Atlas URI")
    console.log("üìã You can find your URI in MongoDB Atlas > Connect > Connect your application")
    return
  }

  const client = new MongoClient(uri)

  try {
    console.log("üîó Connecting to MongoDB Atlas...")
    await client.connect()
    console.log("‚úÖ Connected successfully!")

    const db = client.db(dbName)
    console.log(`üìä Working with database: ${dbName}`)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á collection ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    console.log("üèÄ Creating equipment collection with data...")

    const equipment = db.collection("equipment")

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    await equipment.deleteMany({})

    const equipmentData = [
      {
        name: "‡∏•‡∏π‡∏Å‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•",
        category: "‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•",
        description: "‡∏•‡∏π‡∏Å‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 15,
        available: 15,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏´‡πà‡∏ß‡∏á‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•",
        category: "‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•",
        description: "‡∏´‡πà‡∏ß‡∏á‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•‡πÅ‡∏ö‡∏ö‡∏û‡∏Å‡∏û‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 4,
        available: 4,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•",
        category: "‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•",
        description: "‡∏•‡∏π‡∏Å‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 12,
        available: 12,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏ï‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•",
        category: "‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•",
        description: "‡∏ï‡∏≤‡∏Ç‡πà‡∏≤‡∏¢‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏¢‡πå‡∏ö‡∏≠‡∏•‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏≤‡∏ï‡∏±‡πâ‡∏á",
        total: 2,
        available: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
        category: "‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
        description: "‡∏•‡∏π‡∏Å‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô FIFA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 20,
        available: 20,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
        category: "‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•",
        description: "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡πÅ‡∏ö‡∏ö‡∏û‡∏Å‡∏û‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°",
        total: 4,
        available: 4,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡πÄ‡∏Å‡∏•‡∏µ‡πâ‡∏¢‡∏á",
        category: "‡πÄ‡∏õ‡∏ï‡∏≠‡∏á",
        description: "‡∏•‡∏π‡∏Å‡πÄ‡∏Å‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏ï‡∏≠‡∏á ‡∏ú‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö",
        total: 20,
        available: 20,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡∏•‡∏≤‡∏¢",
        category: "‡πÄ‡∏õ‡∏ï‡∏≠‡∏á",
        description: "‡∏•‡∏π‡∏Å‡∏•‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏ï‡∏≠‡∏á ‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡∏ö‡∏ô‡∏ú‡∏¥‡∏ß‡∏•‡∏π‡∏Å",
        total: 15,
        available: 15,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏•‡∏π‡∏Å‡πÄ‡∏õ‡πâ‡∏≤",
        category: "‡πÄ‡∏õ‡∏ï‡∏≠‡∏á",
        description: "‡∏•‡∏π‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏ï‡∏≠‡∏á ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å",
        total: 10,
        available: 10,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ]

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    const equipmentResult = await equipment.insertMany(equipmentData)
    console.log(`‚úÖ Inserted ${equipmentResult.insertedCount} equipment items`)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á users collection
    console.log("üë§ Creating users collection...")
    const users = db.collection("users")

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    await users.deleteMany({})

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á index
    await users.createIndex({ email: 1 }, { unique: true })

    const bcrypt = require("bcryptjs")
    const hashedPassword = await bcrypt.hash("123456", 12)

    const testUsers = [
      {
        name: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
        email: "test@lcc.ac.th",
        password: hashedPassword,
        grade: "pvs1",
        branch: "accounting",
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
        email: "admin@lcc.ac.th",
        password: await bcrypt.hash("admin123", 12),
        grade: "admin",
        branch: "admin",
        role: "admin",
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ]

    const userResult = await users.insertMany(testUsers)
    console.log(`‚úÖ Inserted ${userResult.insertedCount} users`)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á borrow_records collection
    console.log("üìã Creating borrow_records collection...")
    const borrowRecords = db.collection("borrow_records")

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes
    await borrowRecords.createIndex({ userId: 1, status: 1 })
    await borrowRecords.createIndex({ equipmentId: 1 })

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    const sampleBorrowRecord = {
      userId: userResult.insertedIds[0],
      equipmentId: equipmentResult.insertedIds[0],
      equipmentName: "‡∏•‡∏π‡∏Å‡∏ö‡∏≤‡∏™‡πÄ‡∏Å‡∏ï‡∏ö‡∏≠‡∏•",
      borrowDate: new Date(),
      returnDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      status: "returned",
      actualReturnDate: new Date(),
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    await borrowRecords.insertOne(sampleBorrowRecord)
    console.log("‚úÖ Created borrow_records collection with sample data")

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log("\nüîç Final verification...")
    const equipmentCount = await equipment.countDocuments()
    const userCount = await users.countDocuments()
    const borrowCount = await borrowRecords.countDocuments()

    console.log(`üìä Equipment items: ${equipmentCount}`)
    console.log(`üë§ Users: ${userCount}`)
    console.log(`üìã Borrow records: ${borrowCount}`)

    console.log("\nüéâ Database created successfully!")
    console.log(`üìä Database: ${dbName}`)
    console.log(`üèÄ Equipment: ${equipmentCount} items`)
    console.log(`üë§ Users: ${userCount} users`)
    console.log(`üìã Records: ${borrowCount} records`)

    console.log("\nüîë Test accounts:")
    console.log("   - test@lcc.ac.th / 123456")
    console.log("   - admin@lcc.ac.th / admin123")

    console.log("\nüí° Now refresh MongoDB Compass to see the database!")
  } catch (error) {
    console.error("‚ùå Error creating database:", error.message)

    if (error.message.includes("authentication failed")) {
      console.log("\nüîß Fix: Check your MongoDB Atlas username/password")
    }
    if (error.message.includes("IP")) {
      console.log("\nüîß Fix: Add your IP to MongoDB Atlas whitelist")
    }
    if (error.message.includes("ENOTFOUND")) {
      console.log("\nüîß Fix: Check your internet connection and MongoDB Atlas cluster URL")
    }
  } finally {
    await client.close()
    console.log("\nüîå Disconnected from MongoDB")
  }
}

forceCreateDatabase()
